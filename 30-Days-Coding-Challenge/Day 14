
public class SignlyLinkedList {

    private Node head;
    private Node tail;
    private int size;

    public SignlyLinkedList() {
        this.size = 0;
    }

    // Insertion at the first place
    public void insertFirst(int val) {
        Node node = new Node(val);
        node.next = head;
        head = node;

        if (tail == null) {
            tail = head;
        }
        size += 1;
    }

    // Delete at the first place
    public int deleteFirst() {
        int val = head.value;
        head = head.next;
        if (size == 0) {
            tail = null;
        }
        size -= 1;
        return val;
    }

    // Insertion at the Last place
    public void insertLast(int val) {
        if (tail == null) {
            insertFirst(val);
            return;
        }
        Node node = new Node(val);
        tail.next = node;
        tail = node;
        size += 1;
    }

    // Delete at the Last place
    public int deleteLast() {
        if (size <= 0) {
            return deleteFirst();
        }
        Node secondLast = get(size - 2);
        int val = tail.value;
        tail.next = null;
        return val;
    }

    public Node get(int index) {
        Node current = head;
        for (int i = 0; i < index; i++) {
            current = current.next;
        }
        return current;
    }

    // Insertion at any random place
    public void insert(int val, int index) {
        if (index == 0) {
            insertFirst(val);
        } else if (index == size) {
            insertLast(val);
        } else if (index > 0 && index < size) {
            Node temp = head;
            for (int i = 0; i < index - 1; i++) {
                temp = temp.next;
            }
            Node node = new Node(val);
            node.next = temp.next;
            temp.next = node;
            size += 1;
        } else {
            System.out.println("Index out of bounds");
        }
    }

    // Delete at any random place
    public int delete(int index) {
        if (index == 0) {
            return deleteFirst();
        } else if (index == size - 1) {
            return deleteLast();
        } else if (index > 0 && index < size) {
            Node temp = head;
            for (int i = 0; i < index - 1; i++) {
                temp = temp.next;
            }
            int val = temp.next.value;
            temp.next = temp.next.next;
            size -= 1;
            return val;
        } else {
            System.out.println("Index out of bounds");
            return -1;
        }
    }

    // Display
    public void display() {
        Node temp = head;
        while (temp != null) {
            System.out.print("| " + temp.value + " |" + " --> ");
            temp = temp.next;
        }
        System.out.println("END");
    }

    // Basic Linked List Class
    private class Node {
        private int value;
        private Node next;

        public Node(int value) {
            this.value = value;
        }

        public Node(int value, Node next) {
            this.value = value;
            this.next = next;
        }
    }

    public static void main(String[] args) {
        SignlyLinkedList list = new SignlyLinkedList();

        // Insertion operations
        list.insertFirst(4);
        list.insertFirst(3);
        list.insertFirst(2);
        list.insert(100, 3);
        list.insertFirst(1);
        list.insertLast(99);
        list.display();

        // Delete operations
        list.deleteFirst();
        list.deleteLast();
        list.delete(3);
        list.display();
    }

}

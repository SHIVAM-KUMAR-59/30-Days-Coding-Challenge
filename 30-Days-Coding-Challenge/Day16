 // Insertion at the first place
    public void InsertFirst(int val) {
        Node node = new Node(val);
        node.next = head;
        node.prev = null;
        if (head != null) {
            head.prev = node;
        }
        head = node;
    }

    // Insertion at the last place
    public void InsertLast(int val) {
        Node node = new Node(val);
        Node temp = head;
        if (head == null) {
            head = node;
        } else {
            while (temp.next != null) {
                temp = temp.next;
            }
            temp.next = node;
            node.prev = temp;
        }
    }

    // Insertion after a given value of the node
    public void InsertAfter(int prevNode, int val) {
        Node p = FindNode(prevNode);
        if (p == null) {
            System.out.println("Node does not exist");
            return;
        }
        Node node = new Node(val);
        node.next = p.next;
        p.next = node;
        node.prev = p;
        if (node.next != null) {
            node.next.prev = node;
        }
    }

  // Display in reverse
    public void ReverseDisplay() {
        Node temp = head;
        while (temp.next != null) {
            temp = temp.next;
        }
        while (temp != null) {
            System.out.print(temp.value + " -> ");
            temp = temp.prev;
        }
        System.out.println("END");
    }

 // Delete a given Node
    public void deleteNode(int val) {
        Node temp = head;
        if (temp == null) {
            return;
        }
        if (temp.value == val) {
            head = temp.next;
            tail.next = head;
        }
        do {
            Node currentNode = temp.next;
            if (currentNode.value == val) {
                temp.next = currentNode.next;
                break;
            }
            temp = temp.next;
        } while (temp != head);
    }
